version: "3.4"

services:
  postgresql_database:
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    container_name: ${DATABASE_CONTAINER_NAME}
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ${DATABASE_INIT_SCRIPT_PATH}:/docker-entrypoint-initdb.d/docker_postgres_init.sql
      - databasedata:/var/lib/postgresql/data/
    networks:
      - department_automation

  department-automation-backend:
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    image: vladsokol/department-automation-backend:latest
    build:
      context: .
      dockerfile: DepartmentAutomation.Web/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      DATABASE_URL: "Host=${DATABASE_CONTAINER_NAME};Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
    depends_on:
      - postgresql_database
    networks:
      - department_automation

  department-automation-client:
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    image: vladsokol/department-automation-client:latest
    build:
      context: ./ClientApp
      dockerfile: Dockerfile
    networks:
      - department_automation

  proxy:
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    image: nginx:mainline
    volumes:
      - ${NGINX_CONFIG_PATH}:/etc/nginx/nginx.conf
    ports:
      - "${PROXY_EXTERNAL_PORT}:80"
    networks:
      - department_automation

volumes:
  databasedata:

networks:
  department_automation:
    name: department_automation_network
